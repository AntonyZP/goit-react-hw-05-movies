{"version":3,"file":"static/js/208.5344a6d4.chunk.js","mappings":"qPAkCA,EA/BkB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAeA,OACE,kBAAMH,SAVa,SAAAI,GACnBA,EAAMC,iBACe,KAAjBH,EAAMI,SAGVN,EAASE,GACTC,EAAS,IACV,EAGC,WACI,kBACII,aAAa,MACbC,KAAK,OACLC,MAAOP,EACPQ,SAnBU,SAAAN,GAClBD,EAASC,EAAMO,OAAOF,MAAMG,cAC7B,EAkBSC,WAAS,EACTC,YAAY,yBAElB,mBAAQN,KAAK,SAAb,sBAGL,E,SCTD,EApBwB,SAAC,GAAgB,IAAdO,EAAa,EAAbA,OACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OADAC,QAAQC,IAAIJ,IAEV,yBACGA,IACC,wBACGA,EAAOK,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMT,GAA1C,SACGK,KAFIC,EADC,OAWrB,E,SCgCD,EA/Ce,WACb,OAAwCI,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0B3B,EAAAA,EAAAA,UAAS,MAAnC,eAAO4B,EAAP,KAAcC,EAAd,KACA,GAA4B7B,EAAAA,EAAAA,UAAS,IAArC,eAAOc,EAAP,KAAegB,EAAf,KAEM7B,EAAQyB,EAAaK,IAAI,UAM/BC,EAAAA,EAAAA,YAAU,WAAM,wCAId,8GAE2BC,EAAAA,EAAAA,IAAehC,GAF1C,OAEUiC,EAFV,OAGIJ,EAAUI,EAASC,SAHvB,gDAKIN,EACIA,GAAS,SAAAD,GAAK,OAAIA,EAAMQ,OAAV,KANtB,yDAJc,wBACTnC,GADS,mCAcdoC,EACD,GAAE,CAACpC,IAOJ,OACE,4BACK2B,IAAS,wDACZ,SAAC,EAAD,CACE7B,SA9Be,SAAAE,GACnB0B,EAAgB,CAAE1B,MAAOA,GAC1B,EA6BKQ,SAVoB,SAAAR,GAExB0B,EAD6B,KAAV1B,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,EAQKO,MAAOP,KAGT,SAAC,EAAD,CAAiBa,OAAQA,MAG9B,C,+LCjDDwB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,oGACHF,EAAAA,EAAAA,IAAA,qCAAwCC,IADrC,cACpBL,EADoB,yBAEnBA,EAASO,MAFU,2CAAH,qDAKdR,EAAc,mCAAG,WAAOhC,GAAP,uFACHqC,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEtC,EAAlE,gCADG,cACpBiC,EADoB,yBAEnBA,EAASO,MAFU,2CAAH,sDAKdC,EAAe,mCAAG,WAAMrB,GAAN,uFACJiB,EAAAA,EAAAA,IAAA,gBAAmBjB,EAAnB,oBAAiCkB,EAAjC,oBADI,cACrBL,EADqB,yBAGpBA,EAASO,MAHW,2CAAH,sDAMfE,EAAe,mCAAE,WAAOtB,GAAP,uFACHiB,EAAAA,EAAAA,IAAA,gBAAmBjB,EAAnB,4BAAyCkB,EAAzC,oBADG,cACpBL,EADoB,yBAEnBA,EAASO,MAFU,2CAAF,sDAKfG,EAAe,mCAAE,WAAOvB,GAAP,uFACHiB,EAAAA,EAAAA,IAAA,gBAAmBjB,EAAnB,4BAAyCkB,EAAzC,2BADG,cACpBL,EADoB,yBAEnBA,EAASO,MAFU,2CAAF,qD","sources":["components/SearchBar/SearchBar.jsx","components/MovieSearchList/MovieSearchList.jsx","pages/Movies/Movies.jsx","services/Api.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { PropTypes } from 'prop-types';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInput = event => {\n    setQuery(event.target.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      return;\n    }\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n        <input\n            autoComplete=\"off\"\n            type=\"text\"\n            value={query}\n            onChange={handleInput}\n            autoFocus\n            placeholder=\"Enter the film name\"\n        ></input>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchBar;\n\nSearchBar.propTypes = { onSubmit: PropTypes.func.isRequired };","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieSearchList = ({ movies }) => {\n  const location = useLocation();\n  console.log(movies)\n  return (\n    <div>\n      {movies && (\n        <ul>\n          {movies.map(({ title, id }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MovieSearchList\n\nMovieSearchList.propTypes = {\n    movies: PropTypes.arrayOf(PropTypes.object),\n  };\n\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchBar from 'components/SearchBar';\nimport MovieSearchList from 'components/MovieSearchList';\nimport { APIsearchMovie } from \"services/Api\"\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]);\n\n  const query = searchParams.get('query');\n\n  const handleSubmit = query => {\n    setSearchParams({ query: query });\n  };\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    async function getMoviesByName () {\n      try {\n        const response = await APIsearchMovie(query);\n        setMovies(response.results);\n      } catch {\n        setError(\n            setError(error => error.message)\n        );\n      } \n    };\n    getMoviesByName();\n  }, [query]);\n  \n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <main>\n        {error && <p>Sorry, something went wrong</p>}\n      <SearchBar\n        onSubmit={handleSubmit}\n        onChange={updateQueryString}\n        value={query}\n      ></SearchBar>\n      \n      <MovieSearchList movies={movies} />\n    </main>\n  );\n}\n\nexport default Movies;\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\nconst API_KEY = '534f0be7f0067dcfefc53724eb035425';\n\nexport const APItrendMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data\n}\n\nexport const APIsearchMovie = async (query) => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n    return response.data\n}\n\nexport const APImovieDetails = async id => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`,          \n    );\n    return response.data\n}\n\nexport const APImovieCredits= async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data\n}\n\nexport const APImovieReviews= async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data\n}\n"],"names":["onSubmit","useState","query","setQuery","event","preventDefault","trim","autoComplete","type","value","onChange","target","toLowerCase","autoFocus","placeholder","movies","location","useLocation","console","log","map","title","id","to","state","from","useSearchParams","searchParams","setSearchParams","error","setError","setMovies","get","useEffect","APIsearchMovie","response","results","message","getMoviesByName","axios","API_KEY","APItrendMovies","data","APImovieDetails","APImovieCredits","APImovieReviews"],"sourceRoot":""}